generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?   @default("/avatars/boy.png")
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]

  tasks         Task[]
  activities Activity[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}


enum TaskStatus {
  A_FAZER
  EM_PROGRESSO
  CONCLUIDO
}

enum TaskPriority {
  BAIXA
  MEDIA
  ALTA
}

model Task {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  status      TaskStatus   @default(A_FAZER)
  priority    TaskPriority @default(MEDIA)
  dueDate     DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user        User?    @relation(fields: [userId], references: [id])
  userId      String?
}

model Activity {
  id        String       @id @default(cuid())
  userId    String
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  action    String       // Ex: "CREATE_TASK", "UPDATE_TASK_STATUS"
  entityId  String       // O ID da entidade (ex: o ID da tarefa)
  entityType String      // O tipo da entidade (ex: "TASK")
  details   String?      // Um texto opcional com mais detalhes

  createdAt DateTime     @default(now())

  // Isso cria um índice para buscar atividades por usuário de forma mais rápida
  @@index([userId])
}